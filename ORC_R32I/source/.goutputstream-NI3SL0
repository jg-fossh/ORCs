///////////////////////////////////////////////////////////////////////////////
// File name    : Mul_Acc.v
// Author       : Jose R Garcia
// Create Date  : 18/05/2020 19:25:32
// Project Name : Reusable Unit Library
// Unit Name    : Mul_Acc
// Description  :
//
// Additional Comments:
//
///////////////////////////////////////////////////////////////////////////////

module Mul_Acc #(parameter P_COEFFICIENTS_MSB = 15,   // xxxx.XXXX digits after the point
                           P_DATA_MSB         = 15    // Must be smaller than g_IntegerDigits
                           )
  (
   // Control
   input i_clear,
   // Streaming Data Signals
   input  signed [P_DATA_MSB:0]         i_mac_data_in,        // Input Data
   input  signed [P_COEFFICIENTS_MSB:0] i_mac_coefficient_in, //
   output signed [P_DATA_MSB:0]         o_mac_data_out     // Ouput Data
  );

  ////////////////////////////////////////////////////////////////////////////
  // Internal Parameter Declarations
  ////////////////////////////////////////////////////////////////////////////
  localparam LP_ACCU_MSB = (P_DATA_MSB+P_COEFFICIENTS_MSB+2)-1;

  /////////////////////////////////////////////////////////////////////////////
  // Internal Signal Declarations
  /////////////////////////////////////////////////////////////////////////////
  // Accumulator Process
  reg [LP_ACCU_MSB:0] r_accumulator; // Adder and Multiplication accumulator.

  /////////////////////////////////////////////////////////////////////////////
  //            ********      Architecture Declaration      ********
  /////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////
  // Process     : Accumulator Process
  // Description : Accumulates the filtered samples.
  /////////////////////////////////////////////////////////////////////////////
  always @* begin
    if (i_clear) begin
      r_accumulator = 'b0;
    end
		// Do the convolution. This is a Multiply then add then shift operation.
    r_accumulator = r_accumulator + (i_mac_data_in*i_mac_coefficient_in);
  end

  // Assign register values to output signals
  assign o_mac_data_out = {r_accumulator[LP_ACCU_MSB], r_accumulator[LP_ACCU_MSB-2:P_DATA_MSB]};

endmodule // Mul_Acc
